---
// import {loadScript} from "@paypal/paypal-js";

const {product = {}} = Astro.props

---
<applepay-loader data-product={product} />

<script>
    import {loadScript} from "@paypal/paypal-js";

    let clientIds = {
        sandbox: "AeH0vEMSIJhmj8c9zEMii_Ftr_8Kvkhc72rSjW7Ri_vr3GorvmjWXxLBJnWDh-dpIpo_BH-S4fVqXec4",
        production: "AcNuzeT82VwBR6E52xnPBKqebzewygD0vbDctHiWv_3LcpKpCRZoetN_9WG8fzihYjVkWefwuXyai0nf"
    }

    let merchantIds = {
        sandbox: "RZB8FGXVSK48S",
        production: "AEZMDHDQ9RTUS"
    }

    const applepayContainer = 'applepay_container'
    const storeName = "Ellek's Store (Card is NOT charged)"
    const isSandbox = (window?.location.href.toLowerCase().includes('sandbox') || window?.location.href.toLowerCase().includes('local')) ?? false



    function validate(ApplePaySession, product) {
        console.log('validating for product', product)
        if (!ApplePaySession) {
            console.error('This device does not support Apple Pay');
            return false;
        } else if (!ApplePaySession.canMakePayments()) {
            console.error('This device is not capable of making Apple Pay payments');
            return false;
        }
        return true
    }

    function validateMerchant(event, session, paypal, storeName) {
        console.log('validating merchant')
        paypal.Applepay().validateMerchant({
            validationUrl: event.validationURL,
            displayName: storeName,

        })
            .then(validateResult => {
                session.completeMerchantValidation(validateResult.merchantSession);
                console.log('merchant successfully validated')
            })
            .catch(validateError => {
                console.error(validateError);
                session.abort();
            });
    }

    function authorizePayment(event, session, ApplePaySession) {
        console.log('payment authorized')
        console.log('Your billing address is:', event.payment.billingContact);
        console.log('Your shipping address is:', event.payment.shippingContact);

        console.log("marking payment as complete after 0.5 seconds NOT CALLING ANY APIS")
        setTimeout(() => {
            console.log("marking payment as complete")
            session.completePayment(ApplePaySession.STATUS_SUCCESS)
        }, 500)
    }

    const getProductPrice = (product) => product.price
    const getShipping = () => 5
    const getTaxTotal = (product) => getProductPrice(product) * 0.085

    function getSession(config, product, storeName, ApplePaySession, paypal) {
        const paymentRequest = {
            countryCode: config.countryCode,
            merchantCapabilities: config.merchantCapabilities,
            supportedNetworks: config.supportedNetworks,
            currencyCode: "USD",
            requiredShippingContactFields: ["name", "phone", "email", "postalAddress"],
            requiredBillingContactFields: ["name", "phone", "email", "postalAddress"],
            lineItems: [
                {
                    "label": product.title,
                    "type": "final",
                    "amount": getProductPrice(product)
                },
                {
                    "label": "Tax",
                    "type": "final",
                    "amount": getTaxTotal(product)
                },
                {
                    "label": "Shipping",
                    "type": "final",
                    "amount": getShipping()
                }
            ],
            total: {
                label: storeName,
                type: "final",
                amount: getProductPrice(product) + getTaxTotal(product) + getShipping(),
            }
        };

        const session = new ApplePaySession(4, paymentRequest);

        session.onvalidatemerchant = (event) => validateMerchant(event, session, paypal, storeName)
        session.onpaymentauthorized = (event) => authorizePayment(event, session, ApplePaySession)

        return session
    }

    function onClick(config, product, storeName, ApplePaySession, paypal) {
        console.log('apple pay button clicked')
        const session = getSession(config, product, storeName, ApplePaySession, paypal)
        session.begin();
    }

    function renderButton(config, product, storeName, ApplePaySession, paypal) {
        if (config.isEligible) {
            document.getElementById(applepayContainer).innerHTML = '<apple-pay-button id="apple-pay-button" buttonstyle="black" type="buy" locale="en"></apple-pay-button>'
            document.getElementById("apple-pay-button").onclick = () => onClick(config, product, storeName, ApplePaySession, paypal)
        }
    }

    class ApplePayLoader extends HTMLElement {
        constructor() {
            super();
            console.log('Scripts loaded!')
            console.log(this.dataset)
            const product = JSON.parse(this.dataset.product)

            if (validate(window.ApplePaySession, product)) {
                console.log('Apple pay is eligible')
                loadScript({
                    "client-id": isSandbox ? clientIds.sandbox : clientIds.production,
                    "merchant-id": isSandbox ? merchantIds.sandbox : merchantIds.production,
                    components: "applepay"
                })
                    .then(paypal => {
                        const applepay = paypal.Applepay();
                        applepay.config()
                            .then(config => {
                                renderButton(config, product, storeName, window.ApplePaySession, paypal)
                            })
                            .catch(err => {
                                console.error('Error while fetching apple pay configuration', err)
                            })

                    })
            }
        }
    }

    customElements.define('applepay-loader', ApplePayLoader)
</script>
